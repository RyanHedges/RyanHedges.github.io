<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-11-29T16:00:00-08:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Using Blocks in Ruby</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/11/30/Using-Blocks-in-Ruby.html"/>
    <id>http://blog.url.com/blog/2015/11/30/Using-Blocks-in-Ruby.html</id>
    <published>2015-11-29T16:00:00-08:00</published>
    <updated>2016-01-06T23:53:40-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today I was fortunate enough to be able to spend some time learning about the
intricacies of blocks in Ruby. I am hoping to ramp up from basic to more
complex ideas around blocks in this post so that all skill levels can benefit.&lt;/p&gt;

&lt;p&gt;Blocks at first seem to be rather magical, and as a result, can be
intimidating to dive into. So take a deep breath if you are feeling similar
right now and believe that you will learn something new about blocks!&lt;/p&gt;

&lt;p&gt;So if this is your first dive into blocks let&amp;rsquo;s point one out.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Mon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Tues"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Wednes"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; 
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;day"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The block in this chunk of code starts with &lt;code&gt;do&lt;/code&gt; and ends with &lt;code&gt;end&lt;/code&gt;. You&amp;rsquo;ve
likely seen this with curly braces as well (&lt;code&gt;{ |prefix| puts &amp;quot;#{prefix}day&amp;quot; }&lt;/code&gt;).
What&amp;rsquo;s happening is that each item in the array is being passed into the block
and the code inside is being executed. Let&amp;rsquo;s make up our own method to see how we
would create and use our own block.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_day&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s2"&gt;"day"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;add_day&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Mon&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;add_day&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"What a wonderful &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there are a couple of wonderful things here. First is the keyword &lt;code&gt;yield&lt;/code&gt;.
This keyword knows that an implicit block will be created and that it needs to
give whatever it&amp;rsquo;s provided to that block. In the above example we &lt;code&gt;yield&lt;/code&gt; the
string &lt;code&gt;&amp;quot;day&amp;quot;&lt;/code&gt; to the block and use it to &lt;code&gt;puts&lt;/code&gt; &lt;code&gt;&amp;quot;Monday&amp;quot;&lt;/code&gt; for example.
Second is the term &amp;ldquo;implicit block&amp;rdquo;. To better understand implicit, let&amp;rsquo;s look
at the same example using an explicit block.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_day&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
  &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="s2"&gt;"day"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;add_day&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Mon&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;add_day&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"What a wonderful &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When ran, this produces the same result. The difference is that when you use
the explicit &lt;code&gt;&amp;amp;block&lt;/code&gt; syntax, a &lt;code&gt;Proc&lt;/code&gt; object is being created for you so that
it will be able to respond to the &lt;code&gt;call&lt;/code&gt; method with the argument &lt;code&gt;&amp;quot;day&amp;quot;&lt;/code&gt;.
Some people will want you to understand this because there are performance
trade-offs when using explicit or implicit blocks.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s move towards something a little more real world. Perhaps we
have a need to take a collection of numbers and we wanted to be able to do
work on only those odd numbers. We don&amp;rsquo;t know what the work would be, we just
want that work to only be with odd numbers values. We could write the following method
to help us out.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;each_odd_number&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:odd?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_odd_number&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;odd_number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;odd_number&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We define the &lt;code&gt;each_odd_number&lt;/code&gt; in the &lt;code&gt;Array&lt;/code&gt; class so that every instance of
&lt;code&gt;Array&lt;/code&gt; can now call it. We can make the logic as complex as we need it to be
and can use blocks to create new logic using the method. You can also see that
we call &lt;code&gt;return self&lt;/code&gt; at the end of the method. we haven&amp;rsquo;t made the
method &amp;ldquo;destructive&amp;rdquo; and it&amp;rsquo;s common convention to return the original array
when it&amp;rsquo;s not. If we didn&amp;rsquo;t do this we would have &lt;code&gt;nil&lt;/code&gt; returned.  Let&amp;rsquo;s see
the same thing using the explicit block again.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;each_odd_number&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;some_block&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:odd?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
        &lt;span class="n"&gt;some_block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_odd_number&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;odd_number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;odd_number&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how I use &lt;code&gt;&amp;amp;some_block&lt;/code&gt; as an argument for the method? It&amp;rsquo;s common to
see this as &lt;code&gt;&amp;amp;block&lt;/code&gt; or sometimes as &lt;code&gt;&amp;amp;b&lt;/code&gt; in some projects, but it&amp;rsquo;s really
just a name to identify the &lt;code&gt;Proc&lt;/code&gt; object that&amp;rsquo;s being created and it can be
whatever you want it to be. Other than that, it&amp;rsquo;s identical to the implicit
syntax. Cool right!?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s keep going!&lt;/p&gt;

&lt;p&gt;What if we didn&amp;rsquo;t want that block to run right away? What if we want it to be
&amp;ldquo;saved&amp;rdquo; so we can call it again and again whenever we want? We can use
instance variables to save it and call the block whenever we want.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Robot&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load_speech&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
    &lt;span class="vi"&gt;@speech&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We would then call &lt;code&gt;load_speech&lt;/code&gt; like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;Robot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load_speech&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;#whatever you want could go into here&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Greetings."&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"You can call me Chip"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have the speech saved to the &lt;code&gt;Robot&lt;/code&gt; singleton. Every time we call
&lt;code&gt;load_speech&lt;/code&gt; and give it a block, it changes what the &lt;code&gt;@speech&lt;/code&gt; variable is.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a way for the given block to be executed with a &lt;code&gt;give_speech&lt;/code&gt;
class method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Robot&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load_speech&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
    &lt;span class="vi"&gt;@speech&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;give_speech&lt;/span&gt;
    &lt;span class="vi"&gt;@speech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then when we call &lt;code&gt;Robot.give_speech&lt;/code&gt; the block given to &lt;code&gt;load_speech&lt;/code&gt; is
executed!&lt;/p&gt;

&lt;p&gt;This is the beginnings of a new DSL for interacting with the Robot object.
It&amp;rsquo;s basic but hopefully you are beginning to imagine some of the ways that
blocks can be used.&lt;/p&gt;

&lt;p&gt;When I saw this I started wondering about some of the other ways I&amp;rsquo;ve seen
blocks implemented in ruby projects. Let&amp;rsquo;s configure the robot before we start
interacting with it this time around. We will start be defining the DSL that
we want to be able to use to configure our &lt;code&gt;Robot&lt;/code&gt;. After, we will define how
we want to interact with our robot object and those configurations.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;Robot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Chip"&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set_greeting&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Greetings."&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"you can call me &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Robot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;span class="no"&gt;Robot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;say_greeting&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in looking at this code we want to be able to configure what the name of
the robot is and how to create a greeting for the robot. Let&amp;rsquo;s see how we
could implement this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Robot&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;
    &lt;span class="vi"&gt;@config&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;RobotConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RobotConfig&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_greeting&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
    &lt;span class="vi"&gt;@greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we created an instance of &lt;code&gt;RobotConfig&lt;/code&gt; that we memoize when the &lt;code&gt;config&lt;/code&gt;
method is called. That object is yielded implicitly when &lt;code&gt;Robot.configure&lt;/code&gt; is
called with a block. The &lt;code&gt;RobotConfig&lt;/code&gt; object has a setter method for name and
a &lt;code&gt;set_greeting&lt;/code&gt; method that stores a &lt;code&gt;Proc&lt;/code&gt; in &lt;code&gt;@greeting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we want to start describing the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;say_greeting&lt;/code&gt; methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Robot&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;
    &lt;span class="vi"&gt;@config&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;RobotConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;say_greeting&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RobotConfig&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_greeting&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
    &lt;span class="vi"&gt;@greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;
    &lt;span class="vi"&gt;@greeting&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I updated the &lt;code&gt;name&lt;/code&gt; method on the &lt;code&gt;RobotConfig&lt;/code&gt; object to be an &lt;code&gt;attr_accessor&lt;/code&gt; and then I am able to
pass it into the &lt;code&gt;call&lt;/code&gt; method inside &lt;code&gt;say_greeting&lt;/code&gt; so that it
is yielded correctly to the block that was defined in the &lt;code&gt;configure&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Hopefully through these examples blocks will be less intimidating to work
with. I found that as a learned more about how to use blocks, the less magical
frameworks and gems became.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim Cheatsheet</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/07/01/Vim-Cheatsheet.html"/>
    <id>http://blog.url.com/blog/2015/07/01/Vim-Cheatsheet.html</id>
    <published>2015-06-30T17:00:00-07:00</published>
    <updated>2016-01-06T23:47:29-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve really enjoyed integrating vim into my workflow and value learning
everything that it has to offer. As I continue to grow I will update
this to include helpful tips that don&amp;rsquo;t warrant its own post.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Factory Settings&lt;/h3&gt;

&lt;p&gt;Start vim without your &lt;code&gt;vimrc&lt;/code&gt; configurations. &lt;code&gt;-u NONE&lt;/code&gt; stops vimrc from
loading and &lt;code&gt;-N&lt;/code&gt; sets &lt;code&gt;nocampatible&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;$ vim -u NONE -N
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Insert Normal mode&lt;/h3&gt;

&lt;p&gt;You might be familiar with normal mode and insert mode at this point in your
vim career. Sometimes you just want to fire off one command and go back into
insert mode.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight viml"&gt;&lt;span class="c"&gt;" You can turn this&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;dwi

&lt;span class="c"&gt;" Into this&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Ctl&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;dw
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Ranges&lt;/h3&gt;

&lt;p&gt;Many commands say they use ranges in &lt;code&gt;Ex&lt;/code&gt; commands. You can create a range by
making it comma separated after pressing &lt;code&gt;:&lt;/code&gt;. Documentation will often notate
it like &lt;code&gt;[range]&lt;/code&gt; which means &lt;code&gt;:{start},{end}&lt;/code&gt;. For example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:40,60&lt;/code&gt; - Range from line 40 to line 60.&lt;br&gt;
&lt;code&gt;:/&amp;lt;body&amp;gt;/,/&amp;lt;\/body&amp;gt;/&lt;/code&gt; - Range from the opening and closing of the body tag.&lt;/p&gt;

&lt;h3&gt;Visual mode&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;v&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, and &lt;code&gt;&amp;lt;Ctrl-v&amp;gt;&lt;/code&gt; put you into the three types of visual mode.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;o&lt;/code&gt; when in visual mode to change directions in your selection
without losing currently selected characters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gv&lt;/code&gt; will visual select the last thing you had selected.&lt;/p&gt;

&lt;h3&gt;Uppercase&lt;/h3&gt;

&lt;p&gt;You can change visually selected text to uppercase with &lt;code&gt;U&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gU&lt;/code&gt; will make text uppercase from from normal mode.&lt;/p&gt;

&lt;h3&gt;Indenting&lt;/h3&gt;

&lt;p&gt;I used to use &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to indent lines one step at a time but found something that
works better for me. Add this to your vimrc&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight viml"&gt;&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt; " smart indenting using &lt;span class="p"&gt;==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vim can do some intelligent indenting now when pressing &lt;code&gt;==&lt;/code&gt; on a line. It
knows based on file type and the content the correct indentation levels for
methods, classes, blocks, whatever. This works with motion commands as well so
you can use number keys to indent large sections of files.&lt;/p&gt;

&lt;h5&gt;Intending to end of file&lt;/h5&gt;
&lt;pre&gt;&lt;code class="highlight viml"&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; indents and &lt;code&gt;G&lt;/code&gt; signifies to do the action until the end of the file.&lt;/p&gt;

&lt;h3&gt;Tabs&lt;/h3&gt;

&lt;p&gt;Tabs in vim are like tabs in most other programs. You can read help commands
for tab pages in the vim documentation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight viml"&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt; &lt;span class="k"&gt;tabp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gt&lt;/code&gt; and &lt;code&gt;gT&lt;/code&gt; will cycle through your open tabs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:tab [filename]&lt;/code&gt; will open a file in a new tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Searching&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/&lt;/code&gt; Searches the current buffer for first match and hitting &lt;code&gt;return&lt;/code&gt; will find
all. You might need to escape some character&lt;/p&gt;

&lt;p&gt;&lt;code&gt;n&lt;/code&gt; Moves to each found term&lt;/p&gt;

&lt;h4&gt;Search under cursor&lt;/h4&gt;

&lt;p&gt;You can use &lt;code&gt;*&lt;/code&gt; to search for the word under you cursor. &lt;code&gt;n&lt;/code&gt; works the same
here.&lt;/p&gt;

&lt;h3&gt;Math!&lt;/h3&gt;

&lt;p&gt;Vim can add or subtract values on the numbers. This works on numbers that the
cursor is positioned over. It also will move to the nearest numeric value if
not positioned over it eliminating the need for movement commands.&lt;/p&gt;

&lt;p&gt;This will add 20 and subtract 90.
&lt;code&gt;vim
20&amp;lt;Ctrl-a&amp;gt;
90&amp;lt;Ctrl-x&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Mapping&lt;/h3&gt;

&lt;p&gt;You can look at the list of actions that are mapped to keys by typing &lt;code&gt;:map&lt;/code&gt;
with your matching pattern. For example, I can see what&amp;rsquo;s mapped to
&lt;code&gt;&amp;lt;leader&amp;gt;c&lt;/code&gt; by typing.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight viml"&gt;&lt;span class="p"&gt;:&lt;/span&gt;map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve made a new mapping in my &lt;code&gt;.vimrc&lt;/code&gt; and wondered why it was taking so long
to accept the command. Turns out it was waiting for more characters. This is
helpful because some commands might be mapped to plugins that you&amp;rsquo;ve included.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Markdown Cheatsheet</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/05/01/Markdown-Cheatsheet.html"/>
    <id>http://blog.url.com/blog/2015/05/01/Markdown-Cheatsheet.html</id>
    <published>2015-04-30T17:00:00-07:00</published>
    <updated>2016-01-06T23:47:29-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is a Markdown cheatsheet that I pulled from &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;this github
page&lt;/a&gt; in
order to help me understand and visually see how my blog will render Markdown.
I&amp;rsquo;m used to the Github-flavored markdown in most of my repositories so this
post helped me discover what my blog was rendering markdown. I accomplished
most of this by using the &lt;a href="https://github.com/vmg/redcarpet"&gt;redcarpet gem&lt;/a&gt;
and configuring it in my
&lt;a href="https://github.com/RyanHedges/RyanHedges.github.io/blob/source/config.rb#L40"&gt;config.rb&lt;/a&gt;.
As my blog grows and changes over time I will use this post as a reference and
a regression test that my site is still functioning properly. Feel free to use
this as a reference to see what my blog is currently capable of.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This is intended as a quick reference and showcase. For more complete info, see &lt;a href="http://daringfireball.net/projects/markdown/"&gt;John Gruber&amp;rsquo;s original spec&lt;/a&gt; and the &lt;a href="http://github.github.com/github-flavored-markdown/"&gt;Github-flavored Markdown info page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that there is also a &lt;a href="./Markdown-Here-Cheatsheet"&gt;Cheatsheet specific to Markdown Here&lt;/a&gt; if that&amp;rsquo;s what you&amp;rsquo;re looking for. You can also check out &lt;a href="./Other-Markdown-Tools"&gt;more Markdown tools&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;Table of Contents&lt;/h5&gt;

&lt;p&gt;&lt;a href="#headers"&gt;Headers&lt;/a&gt;&lt;br&gt;
&lt;a href="#emphasis"&gt;Emphasis&lt;/a&gt;&lt;br&gt;
&lt;a href="#lists"&gt;Lists&lt;/a&gt;&lt;br&gt;
&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;br&gt;
&lt;a href="#images"&gt;Images&lt;/a&gt;&lt;br&gt;
&lt;a href="#code"&gt;Code and Syntax Highlighting&lt;/a&gt;&lt;br&gt;
&lt;a href="#tables"&gt;Tables&lt;/a&gt;&lt;br&gt;
&lt;a href="#blockquotes"&gt;Blockquotes&lt;/a&gt;&lt;br&gt;
&lt;a href="#html"&gt;Inline HTML&lt;/a&gt;&lt;br&gt;
&lt;a href="#hr"&gt;Horizontal Rule&lt;/a&gt;&lt;br&gt;
&lt;a href="#lines"&gt;Line Breaks&lt;/a&gt;&lt;br&gt;
&lt;a href="#videos"&gt;Youtube videos&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a name="headers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Headers&lt;/h2&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;# H1
## H2
### H3
#### H4
##### H5
###### H6

Alternatively, for H1 and H2, an underline-ish style:

Alt-H1
======

Alt-H2
------
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;H1&lt;/h1&gt;

&lt;h2&gt;H2&lt;/h2&gt;

&lt;h3&gt;H3&lt;/h3&gt;

&lt;h4&gt;H4&lt;/h4&gt;

&lt;h5&gt;H5&lt;/h5&gt;

&lt;h6&gt;H6&lt;/h6&gt;

&lt;p&gt;Alternatively, for H1 and H2, an underline-ish style:&lt;/p&gt;

&lt;h1&gt;Alt-H1&lt;/h1&gt;

&lt;h2&gt;Alt-H2&lt;/h2&gt;

&lt;p&gt;&lt;a name="emphasis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Emphasis&lt;/h2&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Emphasis, aka italics, with *asterisks* or _underscores_.

Strong emphasis, aka bold, with **asterisks** or __underscores__.

Combined emphasis with **asterisks and _underscores_**.

Strikethrough uses two tildes. ~~Scratch this.~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emphasis, aka italics, with &lt;em&gt;asterisks&lt;/em&gt; or &lt;em&gt;underscores&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Strong emphasis, aka bold, with &lt;strong&gt;asterisks&lt;/strong&gt; or &lt;strong&gt;underscores&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Combined emphasis with &lt;strong&gt;asterisks and &lt;em&gt;underscores&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Strikethrough uses two tildes. &lt;del&gt;Scratch this.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name="lists"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Lists&lt;/h2&gt;

&lt;p&gt;(In this example, leading and trailing spaces are shown with with dots: ⋅)&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;1. First ordered list item
2. Another item
⋅⋅* Unordered sub-list. 
1. Actual numbers don't matter, just that it's a number
⋅⋅1. Ordered sub-list
4. And another item.

⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).

⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)

* Unordered list can use asterisks
- Or minuses
+ Or pluses
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;First ordered list item&lt;/li&gt;
&lt;li&gt;Another item

&lt;ul&gt;
&lt;li&gt;Unordered sub-list. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Actual numbers don&amp;rsquo;t matter, just that it&amp;rsquo;s a number

&lt;ol&gt;
&lt;li&gt;Ordered sub-list&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;And another item.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&amp;rsquo;ll use three here to also align the raw Markdown).&lt;/p&gt;

&lt;p&gt;To have a line break without a paragraph, you will need to use two trailing spaces.&lt;br&gt;
   Note that this line is separate, but within the same paragraph.&lt;br&gt;
   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unordered list can use asterisks&lt;/li&gt;
&lt;li&gt;Or minuses&lt;/li&gt;
&lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="links"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Links&lt;/h2&gt;

&lt;p&gt;There are two ways to create links.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;[I'm an inline-style link](https://www.google.com)

[I'm an inline-style link with title](https://www.google.com "Google's Homepage")

[I'm a reference-style link][Arbitrary case-insensitive reference text]

[I'm a relative reference to a repository file](../blob/master/LICENSE)

[You can use numbers for reference-style link definitions][1]

Or leave it empty and use the [link text itself]

Some text to show that the reference links can follow later.




&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://www.google.com"&gt;I&amp;rsquo;m an inline-style link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title="Google's Homepage" href="https://www.google.com"&gt;I&amp;rsquo;m an inline-style link with title&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mozilla.org"&gt;I&amp;rsquo;m a reference-style link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="../blob/master/LICENSE"&gt;I&amp;rsquo;m a relative reference to a repository file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://slashdot.org"&gt;You can use numbers for reference-style link definitions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or leave it empty and use the &lt;a href="http://www.reddit.com"&gt;link text itself&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some text to show that the reference links can follow later.&lt;/p&gt;

&lt;p&gt;&lt;a name="images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Images&lt;/h2&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Here's our logo (hover to see the title text):

Inline-style: 
![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1")

Reference-style: 
![alt text][logo]


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s our logo (hover to see the title text):&lt;/p&gt;

&lt;p&gt;Inline-style: 
&lt;img title="Logo Title Text 1" alt="alt text" src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" /&gt;&lt;/p&gt;

&lt;p&gt;Reference-style: 
&lt;img title="Logo Title Text 2" alt="alt text" src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name="code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Code and Syntax Highlighting&lt;/h2&gt;

&lt;p&gt;Code blocks are part of the Markdown spec, but syntax highlighting isn&amp;rsquo;t. However, many renderers &amp;ndash; like Github&amp;rsquo;s and &lt;em&gt;Markdown Here&lt;/em&gt; &amp;ndash; support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. &lt;em&gt;Markdown Here&lt;/em&gt; supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the &lt;a href="http://softwaremaniacs.org/media/soft/highlight/test.html"&gt;highlight.js demo page&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Inline `code` has `back-ticks around` it.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inline &lt;code&gt;code&lt;/code&gt; has &lt;code&gt;back-ticks around&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;Blocks of code are either fenced by lines with three back-ticks &lt;code&gt;```&lt;/code&gt;, or are indented with four spaces. I recommend only using the fenced code blocks &amp;ndash; they&amp;rsquo;re easier and only they support syntax highlighting.&lt;/p&gt;

&lt;pre lang="no-highlight"&gt;&lt;code&gt;```javascript
var s = "JavaScript syntax highlighting";
alert(s);
```
 
```python
s = "Python syntax highlighting"
print s
```
 
```
No language indicated, so no syntax highlighting. 
But let's throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.
```
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"JavaScript syntax highlighting"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="highlight python"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python syntax highlighting"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;No language indicated, so no syntax highlighting in Markdown Here (varies on Github). 
But let's throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name="tables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Tables&lt;/h2&gt;

&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but they are part of GFM and &lt;em&gt;Markdown Here&lt;/em&gt; supports them. They are an easy way of adding tables to your email &amp;ndash; a task that would otherwise require copy-pasting from another application.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Colons can be used to align columns.

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |

The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.

Markdown | Less | Pretty
--- | --- | ---
*Still* | `renders` | **nicely**
1 | 2 | 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Colons can be used to align columns.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th style="text-align: center"&gt;Are&lt;/th&gt;
&lt;th style="text-align: right"&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;col 3 is&lt;/td&gt;
&lt;td style="text-align: center"&gt;right-aligned&lt;/td&gt;
&lt;td style="text-align: right"&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 2 is&lt;/td&gt;
&lt;td style="text-align: center"&gt;centered&lt;/td&gt;
&lt;td style="text-align: right"&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zebra stripes&lt;/td&gt;
&lt;td style="text-align: center"&gt;are neat&lt;/td&gt;
&lt;td style="text-align: right"&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The outer pipes (|) are optional, and you don&amp;rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;th&gt;Less&lt;/th&gt;
&lt;th&gt;Pretty&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Still&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;renders&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;nicely&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;a name="blockquotes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Blockquotes&lt;/h2&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;&amp;gt; Blockquotes are very handy in email to emulate reply text.
&amp;gt; This line is part of the same quote.

Quote break.

&amp;gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quote break.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a very long line that will still be quoted properly when it wraps. Oh boy let&amp;rsquo;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can &lt;em&gt;put&lt;/em&gt; &lt;strong&gt;Markdown&lt;/strong&gt; into a blockquote. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name="html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Inline HTML&lt;/h2&gt;

&lt;p&gt;You can also use raw HTML in your Markdown, and it&amp;rsquo;ll mostly work pretty well. &lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;&amp;lt;dl&amp;gt;
  &amp;lt;dt&amp;gt;Definition list&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;Is something people use sometimes.&amp;lt;/dd&amp;gt;

  &amp;lt;dt&amp;gt;Markdown in HTML&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;Does *not* work **very** well. Use HTML &amp;lt;em&amp;gt;tags&amp;lt;/em&amp;gt;.&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
  &lt;dt&gt;Definition list&lt;/dt&gt;
  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;

  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;
  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;a name="hr"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Horizontal Rule&lt;/h2&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Three or more...

---

Hyphens

***

Asterisks

___

Underscores
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three or more&amp;hellip;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Hyphens&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Asterisks&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Underscores&lt;/p&gt;

&lt;p&gt;&lt;a name="lines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Line Breaks&lt;/h2&gt;

&lt;p&gt;My basic recommendation for learning how line breaks work is to experiment and discover &amp;ndash; hit &amp;lt;Enter&amp;gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You&amp;rsquo;ll soon learn to get what you want. &amp;ldquo;Markdown Toggle&amp;rdquo; is your friend. &lt;/p&gt;

&lt;p&gt;Here are some things to try out:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Here's a line for us to start with.

This line is separated from the one above by two newlines, so it will be a *separate paragraph*.

This line is also a separate paragraph, but...
This line is only separated by a single newline, so it's a separate line in the *same paragraph*.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a line for us to start with.&lt;/p&gt;

&lt;p&gt;This line is separated from the one above by two newlines, so it will be a &lt;em&gt;separate paragraph&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This line is also begins a separate paragraph, but&amp;hellip;&lt;br&gt;
This line is only separated by a single newline, so it&amp;rsquo;s a separate line in the &lt;em&gt;same paragraph&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(Technical note: &lt;em&gt;Markdown Here&lt;/em&gt; uses GFM line breaks, so there&amp;rsquo;s no need to use MD&amp;rsquo;s two-space line breaks.)&lt;/p&gt;

&lt;p&gt;&lt;a name="videos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Youtube videos&lt;/h2&gt;

&lt;p&gt;They can&amp;rsquo;t be added directly but you can add an image with a link to the video like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;&amp;lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=YOUTUBE_VIDEO_ID_HERE
" target="_blank"&amp;gt;&amp;lt;img src="http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg" 
alt="IMAGE ALT TEXT HERE" width="240" height="180" border="10" /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, in pure Markdown, but losing the image sizing and border:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Referencing a bug by #bugID in your git commit links it to the slip. For example #1. &lt;/p&gt;
</content>
  </entry>
</feed>
